include "s3eTypes";

// Forward declarations

open class IwGeomCore {

  open s3eTypes;
  
  header '#include <IwGeomCore.h>';
  
  //-----------------------------------------------------------------------------
  // Initialisation function
  //-----------------------------------------------------------------------------
  /**
   * Initialises the IwGeom module.
   * @note This is done automatically by IwGxInit().
   * @par Required Header Files
   * IwGeomCore.h
   */
  // void    IwGeomInit();
  proc IwGeomInit : unit;
  
  /**
   * Terminate IwGeom module. This is done automatically by IwGxTerminate().
   * @par Required Header Files
   * IwGeomCore.h
   */
  //void    IwGeomTerminate();
  proc IwGeomTerminate : unit;
  
  //------------------------------------------------------------------------------
  // Defines
  //------------------------------------------------------------------------------
  /**
   * Default position of fixed point, used with iwfixed and iwsfixed.
   * @par Required Header Files
   * IwGeomCore.h
   */
  const IW_GEOM_POINT:int;
  
  /**
   * Default position of fixed point, used with CIwQuat.
   * @par Required Header Files
   * IwGeomCore.h
   */
  const IW_GEOM_QPOINT:int;
  
  /**
   * Right shift used to convert quaternion fixed point to that of iwfixed.
   * @par Required Header Files
   * IwGeomCore.h
   */
  const IW_GEOM_QPOINT_TO_GEOM_POINT:int;
  
  /**
   * Value of pi as a floating point number.
   * @par Required Header Files
   * IwGeomCore.h
   */
  const PI : float;
  
  /**
   * One as a fixed point number for use with .12 formats.
   * @par Required Header Files
   * IwGeomCore.h
   */
  const IW_GEOM_ONE : uint;
  
  /**
   * One half (1/2) as a fixed point number for use with .12 formats.
   */
  const IW_GEOM_HALF : uint;
  
  /**
   * Same value as IW_GEOM_ONE * IW_GEOM_ONE
   * @par Required Header Files
   * IwGeomCore.h
   */
  const IW_GEOM_ONE2 : uint;
  
  /**
   * One as a fixed point number for use with .30 formats.
   * @par Required Header Files
   * IwGeomCore.h
   */
  const IW_GEOM_QONE : uint;
  
  /**
   * One half (1/2) as a fixed point number for use with .30 formats.
   */
  const IW_GEOM_QHALF : uint;
  
  /**
   * Same value as IW_GEOM_QONE * IW_GEOM_QONE
   * @par Required Header Files
   * IwGeomCore.h
   */
  const IW_GEOM_QONE2 : int64;
  
  /**
   * Small delta for high-resolution fixed point calculations.
   * @par Required Header Files
   * IwGeomCore.h
   */
  const IW_GEOM_QEPSILON : uint;
  
  /**
   * PI as an iwangle.
   * @par Required Header Files
   * IwGeomCore.h
   */
  const IW_ANGLE_PI : iwangle;
  
  /**
   * (2 * PI) as an iwangle.
   * @par Required Header Files
   * IwGeomCore.h
   */
  const IW_ANGLE_2PI : iwangle;
  
  /**
   * (2 * PI) as an iwqangle.
   * @par Required Header Files
   * IwGeomCore.h
   */
  const IW_ANGLE_Q2PI : iwangle;
  
  //------------------------------------------------------------------------------
  // Types
  //------------------------------------------------------------------------------
  /**
   * Typedef of signed 32-bit fixed point number, in 1.19.12 format.
   */
  ctypes iwfixed;
  ctor iwfixed : !ints = "IW_FIXED($1)";
  ctor iwfixed : float = "IW_FIXED_FROM_FLOAT($1)";
  ctor float : iwfixed = "IW_FIXED_TO_FLOAT($1)"; // nearest float
  ctor int32 : iwfixed = "IW_GEOM_ROUND($1)"; // nearest int; .5 rounds up
  fun * : iwfixed * iwfixed -> iwfixed = "IW_FIXED_MUL($1,$2)";
  
  /**
   * Typedef of unsigned 32-bit fixed point number, in 0.20.12 format.
   */
  ctypes iwufixed;
  ctor iwufixed : !ints = "IW_UFIXED($1)";
  
  /**
   * Typedef of signed 16-bit fixed point number, in 1.3.12 format.
   */
  ctypes iwsfixed;
  ctor iwsfixed : !ints = "IW_SFIXED($1)";
  ctor iwsfixed : float = "IW_SFIXED_FROM_FLOAT($1)";
  
  /**
   * Typedef of unsigned 16-bit fixed point number, in 0.4.12 format.
   */
  ctypes iwusfixed;
  ctor iwusfixed : !ints = "IW_USFIXED($1)";
  
  /**
   * Typedef of signed 32-bit high-resolution fixed point number, in 1.1.30 format.
   */
  ctypes iwqfixed;
  ctor iwqfixed : !ints = "IW_QFIXED($1)";

  type degrees = "int";
  ctor degrees : int = "$1";
  ctor int : degrees = "$1";
  ctor degrees : radians = "$1 * 180.0f/PI)";
  
  type radians = "float";
  ctor radians : float = "$1";
  ctor float : radians = "$1";
  ctor radians : degrees = "$1 * PI/180.0f";
  
  /**
   * Typedef of 32-bit fixed point angle, where 0x800 represents PI.
   */
  ctypes iwangle;
  ctor iwangle : degrees = "IW_ANGLE_FROM_DEGREES($1)";
  ctor iwangle : radians = "IW_ANGLE_FROM_RADIANS($1)";
  ctor degrees : iwangle = "IW_ANGLE_TO_DEGREES($1)";
  ctor radians : iwangle = "IW_ANGLE_TO_RADIANS($1)";
  fun - : iwangle * iwangle -> iwangle = "IW_ANGLE_DIFFERENCE($1,$2)";
  
  /**
   * Typedef of 32-bit fixed point angle, where 0x8000 represents PI.
   */
  ctypes iwqangle;

}